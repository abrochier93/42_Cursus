QUESTIONS D'EVALUATION : 
foo                 -> must fail    | foo: command not found
/bin/ls             -> must execute |
/bin/ls -laF        -> must execute 
/bin/ls -l -a -F    -> must execute 
exit                -> must terminate
echo "it works"     -> message must be displayed
echo it works       -> message must be displayed
cd include + /bin/pwd   -> must confirm that the current folder was updated
cd + /bin/pwd           -> must confirm that the current folder is the user home folder
cd - + /bin/pwd         -> must confirm that the current folder is the folder used before (../include)
cd ~/path/of/your/choice + /bin/pwd -> must confirm that the current folder was updated (PAS REUSSI A LE FAIRE FONCTIONNER DANS BASH NI MIISHEL)
env -> environment variables must be displayed key=value
setenv FOO bar || setenv FOO=bar + env ->must display a FOO variable with the value bar
echo $FOO -> the value bar must be displayed
/usr/bin/env -> must display env + FOO=bar (fonctionne pas !! il faut update data->envp en plus de data->envp_list)
unsetenv FOO + env -> FOO must no be displayed
/usr/bin/env -> FOO must no be displayed (ne peut pas être vérifié !)

unsetenv PATH + setenv PATH"/bin:/usr/bin or setenv "PATH=/bin:/usr/bin" + ls -> /bin/ls must be executed
emacs -> /usr/bin/emacs must be properly executed (A TESTER SUR MAC)
unsetenv PATH + ls -> must fail
emacs -> must fail (A TESTER SUR MAC)
/bin/ls -> must be executed
/usr/bin/emacs -> must be executed (A TESTER SUR MAC)
run an empty command -> shell must do nothing and give back the prompt
run a command made of just a single space -> shell must do nothing and give back the prompt
run a command made of just spaces and tabulations -> shell must do nothing and give back the prompt
run a command made of just spaces and tabulations before and after /bin/ls -l -A -> spaces and tabulations musn't interfere with the command execution

BONUS EVALUTION :
instead of typing a command press Ctrl-C -> the shell must give back the prompt
type a random command but press Ctrl-C -> the shell must give back and empty prompt
run cat command and when it waits for inputs press Ctrl-C -> must kill cat and give pas the prompt

create a new folder /tmp/bin and add this folder to the PATH env variable.
create a programm named test_exec_rights inside that folder that will just display KO
give this programm the following rights 644 (=no execution rights)
from an another folder run the command test_exec_rights
the minishell should refuse to run the program because of the missing rights

RAPPEL UNSET PATH : 
ne doit pas fonctionner -> env, cd
doit fonctionner        -> exit, echo, export, pwd, unset

TESTs SUPPLEMENTAIRES : 
echo $USER  $USER91"text"$USER abab$USERabc > outfile.txt
echo text"$USER"
$9
echo "'$USER'"
echo " '$USER' "
echo $USER
echo "$USER"
echo
echo echo
eCho 
eChO
eCHO
ECHO
echo rhobebou
echo stop barking
echo "bonjour"
echo bonjour
echo 'bonjour'
$gdfhgjdfhjk
echo -n bonjour
echo -nn bonjour
echo -n -n -n bonjour
echo -n -n -n bonjour
echo "-n" bonjour
echo -n"-n" bonjour
echo "-nnnn" bonjour
echo "-n -n -n"-n bonjour
echo "-n '-n'" bonjour
echo ~
echo "~"
echo '~'
echo ~123
echo 123~
echo ~/123
echo ~/123/456
echo $USER
echo "$USER"
echo "'$USER'"
echo $USER
echo "$USER"
echo "'$USER'"
echo " '$USER' "
echo text"$USER"
echo text"'$USER'" ' $USER '
echo "text"   "$USER"    "$USER"
echo '              $USER          '
echo               text "$USER"            "$USER"text
echo ''''''''''$USER''''''''''
echo """"""""$USER""""""""
echo $USER'$USER'text oui oui     oui  oui $USER oui      $USER ''
echo $USER '' $USER $USER '' $USER '' $USER -n $USER
echo ' \' ' \'
echo '\" ' " \"\""
$gfdjkghdfjk
echo \\\" \\\" \\\" \\\"\\\"\\\" \\\'\\\'\\\'
echo "$USER""$USER""$USER"
echo text"$USER"test
echo '$USER' "$USER" "text \' text"
echo '$USER'
echo $USER " "
echo "$USER""Users/$USER/file""'$USER'"'$USER'
echo "$USER$USER$USER"
echo '$USER'"$USER"'$USER'
echo '"$USER"''$USER'"""$USER"
echo " $USER  "'$PWD'
echo " $USER  \$ "'$PWD'
echo $USER=4
echo $USER=thallard
echo $USER
echo $?
echo $USER213
echo $USER$12USER$USER=4$USER12
echo $USER $123456789USER $USER123456789
echo $USER $9999USER $8888USER $7777USER
echo $USER $USER9999 $USER8888 $USER7777
echo $USER $USER9999 $USER8888 $USER7777 "$USER"
echo "$USER=12$USER"
echo "$9USER" "'$USER=12$SOMETHING'"
echo $PWD/file
echo "$PWD/file"
echo "text" "text$USER" ... "$USER"
echo $PWD
$ghdfjkgf
bash -c echo "Testing echo"
echo "Les prochains tests seront pour les redirections"
echo "Commencons par un fichier sans droit"
touch bob
chmod 000 bob
cat < bob
echo BobIntoTheBob > bob
echo "Ensuite, avec des quotes et des expands"
diff outfile.txt <("$USER text$USER abab")
rm -f outfile.txt
env | grep "_="
echo "Les prochains tests seront pour les redirections"
echo "Commencons par un fichier sans droit"
touch bob
chmod 0000 bob
cat < bob
echo BobIntoTheBob > bob
echo "Ensuite, avec des quotes et des expands"
echo $USER  $USER91"text"$USER abab$USERabc > outfile.txt
rm -f outfile.txt
diff outfile.txt <("$USER text$USER abab")
env | grep "_="
echo text"$USER"
echo "'$USER'"
echo " '$USER' "
echo $USER
echo "$USER"
echo
echo echo
eCho 
eChO
eCHO
ECHO
echo rhobebou
echo stop barking
echo "bonjour"
echo bonjour
echo 'bonjour'
echo -n bonjour
echo -nn bonjour
echo -n -n -n bonjour
echo -n -n -n bonjour
echo "-n" bonjour
echo -n"-n" bonjour
echo "-nnnn" bonjour
echo "-n -n -n"-n bonjour
echo "-n '-n'" bonjour
echo ~
echo "~"
echo '~'
echo ~123
echo 123~
echo ~/123
echo ~/123/456
$hjkdfhgjkdf
$hjkgdfhgjkdf
echo $USER
echo "$USER"
echo "'$USER'"
echo $USER
echo "$USER"
echo "'$USER'"
echo " '$USER' "
echo text"$USER"
echo text"'$USER'" ' $USER '
echo "text"   "$USER"    "$USER"
echo '              $USER          '
echo               text "$USER"            "$USER"text
echo ''''''''''$USER''''''''''
echo """"""""$USER""""""""
echo $USER'$USER'text oui oui     oui  oui $USER oui      $USER ''
echo $USER '' $USER $USER '' $USER '' $USER -n $USER
$hgjkhgdf
echo ' \' ' \'
echo '\" ' " \"\""
echo \\\" \\\" \\\" \\\"\\\"\\\" \\\'\\\'\\\'
echo "$USER""$USER""$USER"
echo text"$USER"test
echo '$USER' "$USER" "text \' text"
echo '$USER'
echo $USER " "
echo "$USER""Users/$USER/file""'$USER'"'$USER'
echo "$USER$USER$USER"
echo '$USER'"$USER"'$USER'
echo '"$USER"''$USER'"""$USER"
echo " $USER  "'$PWD'
echo " $USER  \$ "'$PWD'
echo $USER=4
echo $USER=thallard
echo $USER
echo $?
echo $USER213
echo $USER$12USER$USER=4$USER12
echo $USER $123456789USER $USER123456789
echo $USER $9999USER $8888USER $7777USER
echo $USER $USER9999 $USER8888 $USER7777
echo $USER $USER9999 $USER8888 $USER7777 "$USER"
echo "$USER=12$USER"
echo "$9USER" "'$USER=12$SOMETHING'"
echo $PWD/file
echo "$PWD/file"
echo "text" "text$USER" ... "$USER"
echo $PWD

echo "Testing cd"
cd 
cd .. 
cd . 
cd /Users 
cd // 
cd '//' 
cd ////// 
cd ./././ 
cd /
cd '/////' 2>/dev/null 
cd '/etc' 
cd '/var' 
cd "$PWD/file_tests" 
cd "doesntexist" 
cd "doesntexist" 2>/dev/null 
cd ../../..
cd "wtf" 2>/dev/null 
cd .. 
cd ..
cd ?
cd +
cd _
cd woof
cd bark bark
cd '/' 
cd $PWD/file_tests 
cd $OLDPWD/something 
echo "Testing pipes"
env | grep "_="
env | grep "SHLVL"
echo oui | cat -e
echo oui | echo non | echo something | grep oui
echo oui | echo non | echo something | grep non
echo oui | echo non | echo something | grep something
cd .. | echo "something"
cd .. | echo "something"
cd / | echo "something"
cd .. | pwd
ifconfig | grep ":"
ifconfig | grep nothing
whoami | grep $USER
whoami | grep $USER > tmp/file
whoami | cat -e | cat -e > tmp/file 
cat Makefile | grep "FLAGS"
cat Makefile | cat -e | cat -e
cat Makefile | grep "FLAGS" | grep "FLAGS" | cat -e
export TEST=123 | cat -e | cat -e
unset TEST | cat -e
echo test | cat -e | cat -e | cat -e
whereis ls | cat -e | cat -e > test
echo test | cat -e | cat -e | cat -e | cat -e | cat -e | cat -e | cat -e | cat -e | cat -e | cat -e | cat -e | cat -e | cat -e | cat -e | cat -e | cat -e | cat -e | cat -e | cat -e | cat -e
ls -la | grep "."
whereis grep > tmp/file 
whereis grep > tmp/file
ls -la > tmp/file
ls -la > tmp/file 
ls > out
