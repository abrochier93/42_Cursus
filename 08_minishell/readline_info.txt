readline
		#include <stdio.h>
       	#include <readline/readline.h>
       	#include <readline/history.h>
		char *readline (const char *prompt);

		DESCRIPTION         
		readline will read a line from the terminal and return it, using
		prompt as a prompt.  If prompt is NULL or the empty string, no
		prompt is issued.  The line returned is allocated with malloc(3);
		the caller must free it when finished.  The line returned has the
		final newline removed, so only the text of the line remains.

		readline offers editing capabilities while the user is entering
		the line.  By default, the line editing commands are similar to
		those of emacs.  A vi-style line editing interface is also
		available.

		RETURN VALUE         
		readline returns the text of the line read.  A blank line returns
		the empty string.  If EOF is encountered while reading a line,
		and the line is empty, NULL is returned.  If an EOF is read with
		a non-empty line, it is treated as a newline.

		FONCTIONS ASSOCIEES
		@ void rl_clear_history (void) :
		Clear the history list by deleting all of the entries, in the same manner as the History 
		library’s clear_history() function. This differs from clear_history because it frees 
		private data Readline saves in the history list.

		@ int rl_on_new_line (void) :
		Tell the update functions that we have moved onto a new (empty) line, usually after 
		outputting a newline.

		@ void rl_replace_line (const char *text, int clear_undo) :
		Replace the contents of rl_line_buffer with text. The point and mark are preserved, 
		if possible. If clear_undo is non-zero, the undo list associated with the current line 
		is cleared.

		@ void rl_redisplay (void) :
		Change what’s displayed on the screen to reflect the current contents of rl_line_buffer.

		@ add_history (line);
		You must call add_history() to save the line away in a history list of such lines.